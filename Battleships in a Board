class Solution {
public:

    void dfs(vector<vector<char>>& board, vector<vector<int>>& visited, int row, int col, int n, int m ){
        if(row<0 || row>=n || col<0 || col>=m || visited[row][col] == 1 || board[row][col] == '.'){
            return;
        }
        visited[row][col] = 1;
        
        dfs(board, visited, row-1, col, n, m);
        dfs(board, visited, row+1, col, n, m);
        dfs(board, visited, row, col-1, n, m);
        dfs(board, visited, row, col+1, n, m);
    }

    int countBattleships(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        int count = 0;

        vector<vector<int>> visited(n,vector<int>(m,0));

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(board[i][j] == 'X' && visited[i][j] == 0){
                    dfs(board, visited, i, j, n, m);
                    count++;
                }
            }
        }
        return count;
    }
};
